diff --git a/node_modules/eslint/lib/rules/consistent-return.js b/node_modules/eslint/lib/rules/consistent-return.js
index f31c2e1..6cf3a2c 100644
--- a/node_modules/eslint/lib/rules/consistent-return.js
+++ b/node_modules/eslint/lib/rules/consistent-return.js
@@ -78,7 +78,7 @@ module.exports = {
     },
 
     create(context) {
-        const [{ treatUndefinedAsUnspecified }] = context.options;
+        const [{ treatUndefinedAsUnspecified } = this.meta.defaultOptions[0]] = context.options;
         let funcInfo = null;
 
         /**
diff --git a/node_modules/eslint/lib/rules/no-invalid-this.js b/node_modules/eslint/lib/rules/no-invalid-this.js
index 0a7b9e4..0addf46 100644
--- a/node_modules/eslint/lib/rules/no-invalid-this.js
+++ b/node_modules/eslint/lib/rules/no-invalid-this.js
@@ -61,7 +61,7 @@ module.exports = {
     },
 
     create(context) {
-        const [{ capIsConstructor }] = context.options;
+        const [{ capIsConstructor } = this.meta.defaultOptions[0]] = context.options;
         const stack = [],
             sourceCode = context.sourceCode;
 
diff --git a/node_modules/eslint/lib/rules/no-unused-expressions.js b/node_modules/eslint/lib/rules/no-unused-expressions.js
index fd1437c..42cdffa 100644
--- a/node_modules/eslint/lib/rules/no-unused-expressions.js
+++ b/node_modules/eslint/lib/rules/no-unused-expressions.js
@@ -76,7 +76,7 @@ module.exports = {
             allowTernary,
             allowTaggedTemplates,
             enforceForJSX
-        }] = context.options;
+        } = this.meta.defaultOptions[0]] = context.options;
 
         /**
          * Has AST suggesting a directive.
diff --git a/node_modules/eslint/lib/rules/no-warning-comments.js b/node_modules/eslint/lib/rules/no-warning-comments.js
index 628f5a2..a42e831 100644
--- a/node_modules/eslint/lib/rules/no-warning-comments.js
+++ b/node_modules/eslint/lib/rules/no-warning-comments.js
@@ -64,7 +64,7 @@ module.exports = {
 
     create(context) {
         const sourceCode = context.sourceCode;
-        const [{ decoration, location, terms: warningTerms }] = context.options;
+        const [{ decoration, location, terms: warningTerms } = this.meta.defaultOptions[0]] = context.options;
         const escapedDecoration = escapeRegExp(decoration ? decoration.join("") : "");
         const selfConfigRegEx = /\bno-warning-comments\b/u;
 
