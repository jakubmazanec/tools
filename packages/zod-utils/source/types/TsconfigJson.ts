import * as z from 'zod';

let jsxSchema = z.enum(['preserve', 'react', 'react-jsx', 'react-jsxdev', 'react-native']);

let moduleSchema = z.enum([
  'CommonJS',
  'AMD',
  'System',
  'UMD',
  'ES6',
  'ES2015',
  'ES2020',
  'ESNext',
  'None',
  'commonjs',
  'amd',
  'system',
  'umd',
  'es6',
  'es2015',
  'es2020',
  'esnext',
  'none',
]);

let newLineSchema = z.enum(['CRLF', 'LF', 'crlf', 'lf']);

let targetSchema = z.enum([
  'ES3',
  'ES5',
  'ES6',
  'ES2015',
  'ES2016',
  'ES2017',
  'ES2018',
  'ES2019',
  'ES2020',
  'ES2021',
  'ESNext',
  'es3',
  'es5',
  'es6',
  'es2015',
  'es2016',
  'es2017',
  'es2018',
  'es2019',
  'es2020',
  'es2021',
  'esnext',
]);

let libSchema = z.enum([
  'ES5',
  'ES6',
  'ES7',
  'ES2015',
  'ES2015.Collection',
  'ES2015.Core',
  'ES2015.Generator',
  'ES2015.Iterable',
  'ES2015.Promise',
  'ES2015.Proxy',
  'ES2015.Reflect',
  'ES2015.Symbol.WellKnown',
  'ES2015.Symbol',
  'ES2016',
  'ES2016.Array.Include',
  'ES2017',
  'ES2017.Intl',
  'ES2017.Object',
  'ES2017.SharedMemory',
  'ES2017.String',
  'ES2017.TypedArrays',
  'ES2018',
  'ES2018.AsyncGenerator',
  'ES2018.AsyncIterable',
  'ES2018.Intl',
  'ES2018.Promise',
  'ES2018.Regexp',
  'ES2019',
  'ES2019.Array',
  'ES2019.Object',
  'ES2019.String',
  'ES2019.Symbol',
  'ES2020',
  'ES2020.BigInt',
  'ES2020.Promise',
  'ES2020.String',
  'ES2020.Symbol.WellKnown',
  'ES2020.SharedMemory',
  'ES2020.Intl',
  'ES2021',
  'ES2021.Promise',
  'ES2021.String',
  'ES2021.WeakRef',
  'ESNext',
  'ESNext.Array',
  'ESNext.AsyncIterable',
  'ESNext.BigInt',
  'ESNext.Intl',
  'ESNext.Promise',
  'ESNext.String',
  'ESNext.Symbol',
  'ESNext.WeakRef',
  'DOM',
  'DOM.Iterable',
  'ScriptHost',
  'WebWorker',
  'WebWorker.ImportScripts',
  'WebWorker.Iterable',
  'es5',
  'es6',
  'es7',
  'es2015',
  'es2015.collection',
  'es2015.core',
  'es2015.generator',
  'es2015.iterable',
  'es2015.promise',
  'es2015.proxy',
  'es2015.reflect',
  'es2015.symbol.wellknown',
  'es2015.symbol',
  'es2016',
  'es2016.array.include',
  'es2017',
  'es2017.intl',
  'es2017.object',
  'es2017.sharedmemory',
  'es2017.string',
  'es2017.typedarrays',
  'es2018',
  'es2018.asyncgenerator',
  'es2018.asynciterable',
  'es2018.intl',
  'es2018.promise',
  'es2018.regexp',
  'es2019',
  'es2019.array',
  'es2019.object',
  'es2019.string',
  'es2019.symbol',
  'es2020',
  'es2020.bigint',
  'es2020.promise',
  'es2020.string',
  'es2020.symbol.wellknown',
  'es2020.sharedmemory',
  'es2020.intl',
  'es2021',
  'es2021.promise',
  'es2021.string',
  'es2021.weakref',
  'esnext',
  'esnext.array',
  'esnext.asynciterable',
  'esnext.bigint',
  'esnext.intl',
  'esnext.promise',
  'esnext.string',
  'esnext.symbol',
  'esnext.weakref',
  'dom',
  'dom.iterable',
  'scripthost',
  'webworker',
  'webworker.importscripts',
  'webworker.iterable',
]);

let pluginSchema = z
  .object({
    name: z.string().optional(),
  })
  .strict()
  .and(z.record(z.string(), z.unknown()));

let importsNotUsedAsValuesSchema = z.enum(['remove', 'preserve', 'error']);

let fallbackPollingSchema = z.enum([
  'fixedPollingInterval',
  'priorityPollingInterval',
  'dynamicPriorityPolling',
  'fixedInterval',
  'priorityInterval',
  'dynamicPriority',
  'fixedChunkSize',
]);

let watchDirectory = z.enum([
  'useFsEvents',
  'fixedPollingInterval',
  'dynamicPriorityPolling',
  'fixedChunkSizePolling',
]);

let watchFileSchema = z.enum([
  'fixedPollingInterval',
  'priorityPollingInterval',
  'dynamicPriorityPolling',
  'useFsEvents',
  'useFsEventsOnParentDirectory',
  'fixedChunkSizePolling',
]);

let compilerOptionsSchema = z
  .object({
    allowJs: z.boolean().optional(),
    allowSyntheticDefaultImports: z.boolean().optional(),
    allowUmdGlobalAccess: z.boolean().optional(),
    allowUnreachableCode: z.boolean().optional(),
    allowUnusedLabels: z.boolean().optional(),
    alwaysStrict: z.boolean().optional(),
    assumeChangesOnlyAffectDirectDependencies: z.boolean().optional(),
    baseUrl: z.string().optional(),
    charset: z.string().optional(),
    checkJs: z.boolean().optional(),
    composite: z.boolean().optional(),
    declaration: z.boolean().optional(),
    declarationDir: z.string().optional(),
    declarationMap: z.boolean().optional(),
    diagnostics: z.boolean().optional(),
    disableReferencedProjectLoad: z.boolean().optional(),
    disableSizeLimit: z.boolean().optional(),
    disableSolutionSearching: z.boolean().optional(),
    disableSourceOfProjectReferenceRedirect: z.boolean().optional(),
    downlevelIteration: z.boolean().optional(),
    emitBOM: z.boolean().optional(),
    emitDeclarationOnly: z.boolean().optional(),
    emitDecoratorMetadata: z.boolean().optional(),
    esModuleInterop: z.boolean().optional(),
    exactOptionalPropertyTypes: z.boolean().optional(),
    experimentalDecorators: z.boolean().optional(),
    explainFiles: z.boolean().optional(),
    extendedDiagnostics: z.boolean().optional(),
    fallbackPolling: fallbackPollingSchema.optional(),
    forceConsistentCasingInFileNames: z.boolean().optional(),
    generateCpuProfile: z.string().optional(),
    importHelpers: z.boolean().optional(),
    importsNotUsedAsValues: importsNotUsedAsValuesSchema.optional(),
    incremental: z.boolean().optional(),
    inlineSourceMap: z.boolean().optional(),
    inlineSources: z.boolean().optional(),
    isolatedModules: z.boolean().optional(),
    jsx: jsxSchema.optional(),
    jsxFactory: z.string().optional(),
    jsxFragmentFactory: z.string().optional(),
    jsxImportSource: z.string().optional(),
    keyofStringsOnly: z.boolean().optional(),
    lib: libSchema.array().optional(),
    listEmittedFiles: z.boolean().optional(),
    listFiles: z.boolean().optional(),
    listFilesOnly: z.boolean().optional(),
    mapRoot: z.string().optional(),
    maxNodeModuleJsDepth: z.number().optional(),
    module: moduleSchema.optional(),
    moduleResolution: z.enum(['classic', 'node']).optional(),
    newLine: newLineSchema.optional(),
    noEmit: z.boolean().optional(),
    noEmitHelpers: z.boolean().optional(),
    noEmitOnError: z.boolean().optional(),
    noErrorTruncation: z.boolean().optional(),
    noFallthroughCasesInSwitch: z.boolean().optional(),
    noImplicitAny: z.boolean().optional(),
    noImplicitOverride: z.boolean().optional(),
    noImplicitReturns: z.boolean().optional(),
    noImplicitThis: z.boolean().optional(),
    noImplicitUseStrict: z.boolean().optional(),
    noLib: z.boolean().optional(),
    noPropertyAccessFromIndexSignature: z.boolean().optional(),
    noResolve: z.boolean().optional(),
    noStrictGenericChecks: z.boolean().optional(),
    noUncheckedIndexedAccess: z.boolean().optional(),
    noUnusedLocals: z.boolean().optional(),
    noUnusedParameters: z.boolean().optional(),
    outDir: z.string().optional(),
    outFile: z.string().optional(),
    paths: z.record(z.string(), z.string().array()).optional(),
    plugins: pluginSchema.array().optional(),
    preserveConstEnums: z.boolean().optional(),
    preserveSymlinks: z.boolean().optional(),
    preserveWatchOutput: z.boolean().optional(),
    pretty: z.boolean().optional(),
    reactNamespace: z.string().optional(),
    removeComments: z.boolean().optional(),
    resolveJsonModule: z.boolean().optional(),
    rootDir: z.string().optional(),
    rootDirs: z.string().array().optional(),
    skipDefaultLibCheck: z.boolean().optional(),
    skipLibCheck: z.boolean().optional(),
    sourceMap: z.boolean().optional(),
    sourceRoot: z.string().optional(),
    strict: z.boolean().optional(),
    strictBindCallApply: z.boolean().optional(),
    strictFunctionTypes: z.boolean().optional(),
    strictNullChecks: z.boolean().optional(),
    strictPropertyInitialization: z.boolean().optional(),
    stripInternal: z.boolean().optional(),
    suppressExcessPropertyErrors: z.boolean().optional(),
    suppressImplicitAnyIndexErrors: z.boolean().optional(),
    target: targetSchema.optional(),
    traceResolution: z.boolean().optional(),
    tsBuildInfoFile: z.string().optional(),
    typeRoots: z.string().array().optional(),
    types: z.string().array().optional(),
    useDefineForClassFields: z.boolean().optional(),
    useUnknownInCatchVariables: z.boolean().optional(),
    watch: z.boolean().optional(),
    watchDirectory: watchDirectory.optional(),
    watchFile: watchFileSchema.optional(),
  })
  .strict();

let typeAcquisitionSchema = z
  .object({
    enable: z.boolean().optional(),
    include: z.string().array().optional(),
    exclude: z.string().array().optional(),
  })
  .strict();

let referencesSchema = z
  .object({
    path: z.string(),

    originalPath: z.string().optional(),
    prepend: z.boolean().optional(),
    circular: z.boolean().optional(),
  })
  .strict();

export const tsconfigJsonSchema = z
  .object({
    compileOnSave: z.boolean().optional(),
    compilerOptions: compilerOptionsSchema.optional(),
    exclude: z.string().array().optional(),
    extends: z.string().optional(),
    files: z.string().array().optional(),
    include: z.string().array().optional(),
    references: referencesSchema.array().optional(),
    typeAcquisition: typeAcquisitionSchema.optional(),
  })
  .strict();

export type TsconfigJson = z.infer<typeof tsconfigJsonSchema>;
