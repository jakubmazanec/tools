---
to: '.github/workflows/release.yaml'
strategy: overwrite
---
<%
let apps = [];
let appsWithDb = [];

for (let project of workspace.projects) {
  if (project.config.deployment?.appName) {
    apps.push(project.name);
  }

  if (project.config.deployment?.dbInstance) {
    appsWithDb.push(project.name);
  }
}

let appsFilter = apps.map((name) => `--filter=!${name}`).join(' ');

if (appsFilter) {
  appsFilter = `-- ${appsFilter}`;
}

let appsWithDbFilter = appsWithDb.map((name) => `--filter=!${name}`).join(' ');

if (appsWithDbFilter) {
  appsWithDbFilter = `-- ${appsWithDbFilter}`;
}
-%>
#
# DO NOT EDIT!
# This file was autogenerated by Carson.
# Changes may cause incorrect behavior and will be lost when the file is regenerated.
#
# Run `npx carson update workspace` to regenerate.
#

name: Release

on: [push, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release_main_branch:
    name: Release
    if: ${{ github.ref_name == '<%- getMainBranch(workspace) %>' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.email "bot@mazanec.dev"
          git config user.name "Bot"

      - uses: actions/setup-node@v4
        with:
          node-version: <%- semver.major(semver.minVersion(DEPENDENCY_VERSIONS.node)) %>
          registry-url: 'https://registry.npmjs.org'

<%
if (workspace.projects.some((project) => project.config.deployment?.appName)) {
-%>

      - uses: superfly/flyctl-actions/setup-flyctl@master
<%
}

if (workspace.projects.some((project) => project.config.deployment?.dbInstance)) {
-%>

      - uses: geldata/setup-gel@v1
        with:
          server-version: none
<%
}
-%>

      - name: Install packages
        run: npm ci

      - name: Check for changes
        run: |
          git config core.filemode false
          git_status=$(git status --porcelain)

          if [[ -n $git_status ]]; then
            echo "You have uncommitted changes!"
            git diff
            git config --unset core.filemode
            exit 1
          fi

          git config --unset core.filemode

<%
for (let project of workspace.projects) {
  if (project.config.deployment?.dbInstance) {
-%>

      - name: Migrate "<%- project.name %>"
        run: |
          gel migrate --schema-dir <%- project.relativePath %>/dbschema
        env:
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name  }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
<%
  }
}
-%>

      - name: Test
        run: npm test <%- appsWithDbFilter %>

<%
for (let project of workspace.projects) {
  if (project.config.deployment?.dbInstance) {
-%>

      - name: Test "<%- project.name %>"
        run: |
          npm run test -- --filter=<%- project.name %>
        env:
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
<%
  }
}
-%>

      - name: Check for changes
        run: |
          git config core.filemode false
          git_status=$(git status --porcelain)

          if [[ -n $git_status ]]; then
            echo "You have uncommitted changes!"
            git diff
            git config --unset core.filemode
            exit 1
          fi

          git config --unset core.filemode

      - name: Build packages
        run: npm run build <%- appsFilter %>

      - name: Authenticate to npm registry
        run: |
          echo "//registry.npmjs.com/:_authToken=NPM_TOKEN" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Version packages
        run: |
          npx changeset version
          git status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes
        run: |
          git add -A
          git reset .npmrc
          git status
          git commit -m"Release [skip actions]"

      - name: Publish packages
        run: |
          npx changeset publish --no-git-tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: 'true' # must be string, not boolean

      - name: Update lockfile
        run: |
          npm install
          git add package-lock.json
          git status
          git commit --amend --no-edit

      - name: Update Carson
        run: |
          git add **/.carson/*.snapshot
          git status
          git commit --amend --no-edit

      - name: Add git tags
        run: |
          npx changeset tag

      - name: Push changes
        run: |
          git push --follow-tags

      - name: Checkout development branch
        run: |
          git fetch -p origin
          git checkout -B <%- getDevelopmentBranch(workspace) %>
          git branch --set-upstream-to=origin/<%- getDevelopmentBranch(workspace) %> <%- getDevelopmentBranch(workspace) %>
          git reset --hard origin/<%- getDevelopmentBranch(workspace) %>

      - name: Merge and commit
        run: |
          git merge <%- getMainBranch(workspace) %> --no-verify
          git push -u origin <%- getDevelopmentBranch(workspace) %> --no-verify

      - name: Checkout main branch
        run: |
          git checkout -B <%- getMainBranch(workspace) %>
          git branch --set-upstream-to=origin/<%- getMainBranch(workspace) %> <%- getMainBranch(workspace) %>
          git reset --hard origin/<%- getMainBranch(workspace) %>
          git pull

<%
for (let project of workspace.projects) {
  if (project.config.deployment?.appName && project.config.deployment?.dbInstance) {
-%>

      - name: Deploy "<%- project.name %>"
        run: |
          npm run deploy --workspace <%- project.name %> -- --build-arg "VITE_APP_URL=$VITE_APP_URL" --build-arg "GEL_INSTANCE=$GEL_INSTANCE" --build-arg "GEL_BRANCH=$GEL_BRANCH" --build-secret "GEL_SECRET_KEY=$GEL_SECRET_KEY"
        env:
          VITE_APP_URL: <%- getAppUrl(project) %>
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
<%
  } else if (project.config.deployment?.appName) {
-%>

      - name: Deploy "<%- project.name %>"
        run: |
          npm run deploy --workspace <%- project.name %> -- --build-arg "VITE_APP_URL=$VITE_APP_URL"
        env:
          VITE_APP_URL: <%- getAppUrl(project) %>
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
<%
  } else if (project.config.template.includes('projects/react-library')) {
-%>

      - name: Deploy "<%- project.name %>"
        run: |
          cd <%- project.relativePath %>
          npx --yes chromatic --project-token="$CHROMATIC_TOKEN" --storybook-build-dir storybook-static --exit-zero-on-changes --no-interactive
        env:
          CHROMATIC_TOKEN: ${{ secrets.<%- lodash.snakeCase(project.name).toUpperCase() %>_CHROMATIC_TOKEN }}
<%
  }
}
-%>

  release_development_branch:
    name: Release preview
    if: ${{ github.ref_name == '<%- getDevelopmentBranch(workspace) %>' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.email "bot@mazanec.dev"
          git config user.name "Bot"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

<%
if (workspace.projects.some((project) => project.config.deployment?.appName)) {
-%>

      - uses: superfly/flyctl-actions/setup-flyctl@master
<%
}

if (workspace.projects.some((project) => project.config.deployment?.dbInstance)) {
-%>

      - uses: geldata/setup-gel@v1
        with:
          server-version: none
<%
}
-%>

      - name: Install packages
        run: npm ci

      - name: Check for changes
        run: |
          git config core.filemode false
          git_status=$(git status --porcelain)

          if [[ -n $git_status ]]; then
            echo "You have uncommitted changes!"
            git diff
            git config --unset core.filemode
            exit 1
          fi

          git config --unset core.filemode

<%
for (let project of workspace.projects) {
  if (project.config.deployment?.dbInstance) {
-%>

      - name: Migrate "<%- project.name %>"
        run: |
          gel migrate --schema-dir <%- project.relativePath %>/dbschema
        env:
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name  }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
<%
  }
}
-%>

      - name: Test
        run: npm test <%- appsWithDbFilter %>

<%
for (let project of workspace.projects) {
  if (project.config.deployment?.dbInstance) {
-%>

      - name: Test "<%- project.name %>"
        run: |
          npm run test -- --filter=<%- project.name %>
        env:
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
<%
  }
}
-%>

      - name: Check for changes
        run: |
          git config core.filemode false
          git_status=$(git status --porcelain)

          if [[ -n $git_status ]]; then
            echo "You have uncommitted changes!"
            git diff
            git config --unset core.filemode
            exit 1
          fi

          git config --unset core.filemode

      - name: Build packages
        run: npm run build <%- appsFilter %>

      - name: Update documentation
        run: |
          npm run document --if-present
          npm run format --if-present
          git add **/docs/**
          git status
          git commit -m"Update docs [skip actions]"
          git push --force
        continue-on-error: true

      - name: Authenticate to npm registry
        run: |
          echo "//registry.npmjs.com/:_authToken=NPM_TOKEN" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Version packages
        run: |
          npx changeset version --snapshot next.$(git rev-parse --short HEAD) --snapshot-prerelease-template "{tag}"
          git status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages
        run: |
          npx changeset publish --tag next --no-git-tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: 'true' # must be string, not boolean
<%
for (let project of workspace.projects) {
  if (project.config.deployment?.appName && project.config.deployment?.dbInstance) {
-%>

      - name: Deploy "<%- project.name %>"
        run: |
          npm run deploy --workspace <%- project.name %> -- --app <%- project.config.deployment?.appName %>-next --build-arg "VITE_APP_URL=$VITE_APP_URL" --build-arg "GEL_INSTANCE=$GEL_INSTANCE" --build-arg "GEL_BRANCH=$GEL_BRANCH" --build-secret "GEL_SECRET_KEY=$GEL_SECRET_KEY"
        env:
          VITE_APP_URL: <%- getAppUrl(project, 'next') %>
          GEL_INSTANCE: <%- project.config.deployment.dbInstance %>
          GEL_BRANCH: ${{ github.ref_name }}
          GEL_SECRET_KEY: ${{ secrets.<%- lodash.snakeCase(project.config.deployment.dbInstance).toUpperCase() %>_GEL_TOKEN }}
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
<%
  } else if (project.config.deployment?.appName) {
-%>

      - name: Deploy "<%- project.name %>"
        run: |
          npm run deploy --workspace <%- project.name %> -- --app <%- project.config.deployment?.appName %>-next --build-arg "VITE_APP_URL=$VITE_APP_URL"
        env:
          VITE_APP_URL: <%- getAppUrl(project, 'next') %>
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
<%
  }
}
-%>
