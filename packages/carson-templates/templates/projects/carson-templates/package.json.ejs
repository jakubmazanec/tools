---
to: 'package.json'
strategy: merge
---
<%
let developmentDependencies = getDependencies(
  [
    LINTER_CONFIG_PACKAGE_NAME,
    TEMPLATE_PACKAGE_NAME,
    '@types/lodash',
    '@types/node',
    '@vitest/coverage-v8',
    'del-cli',
    'esbuild',
    'eslint',
    'lodash',
    'prettier',
    'prettier-plugin-packagejson',
    'typedoc',
    'typedoc-plugin-markdown',
    'typescript',
    'vitest',
  ],
  workspace,
);
let packageJson = {
  repository: {
    type: 'git',
    directory: project.relativePath,
  },
  type: 'module',
  exports: {
    '.': `./${BUILD_DIRECTORY}/main.js`,
    './package.json': './package.json',
  },
  files: [BUILD_DIRECTORY, SOURCE_DIRECTORY, 'templates'],
  scripts: {
    build: `del-cli ${BUILD_DIRECTORY} tsconfig.tsbuildinfo && ${BUILD_TO_ESM_COMMAND} && tsc`,
    clean: `del-cli coverage ${BUILD_DIRECTORY} *.tsbuildinfo`,
    document: 'del-cli docs && typedoc --options typedoc.config.cjs',
      format: FORMAT_COMMAND,
    lint: 'eslint .',
    test: `del-cli coverage && ${TEST_COMMAND}`,
    typecheck: 'tsc --project tsconfig.typecheck.json',
  },
  devDependencies: developmentDependencies,
  packageManager: `npm@${semver.minVersion(DEPENDENCY_VERSIONS.npm)}`,
  engines: {
    node: DEPENDENCY_VERSIONS.node,
  },
};
-%>
<%- JSON.stringify(packageJson) %>
