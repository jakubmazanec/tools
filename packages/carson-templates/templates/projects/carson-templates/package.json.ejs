---
to: 'package.json'
strategy: merge
---
<%
let developmentDependencies = [
  LINTER_CONFIG_PACKAGE_NAME,
  '@types/lodash',
  '@types/node',
  '@vitest/coverage-v8',
  'del-cli',
  'esbuild',
  'eslint',
  'lodash',
  'prettier',
  'prettier-plugin-packagejson',
  'typedoc',
  'typedoc-plugin-markdown',
  'typescript',
  'vitest',
].filter((dependency) => {
  return !Object.keys(project.packageJson.dependencies ?? {}).some((key) => key === dependency); // if the project package.json already contains dependency, we don't need to add it
});
let packageJson = {
  repository: {
    type: 'git',
    directory: project.relativePath,
  },
  type: 'module',
  exports: {
    '.': `./${BUILD_DIRECTORY}/main.js`,
    './package.json': './package.json',
  },
  files: [BUILD_DIRECTORY, SOURCE_DIRECTORY, 'templates'],
  scripts: {
    build: `del-cli ${BUILD_DIRECTORY} tsconfig.tsbuildinfo && ${BUILD_TO_ESM_COMMAND} && tsc`,
    clean: `del-cli coverage ${BUILD_DIRECTORY} *.tsbuildinfo`,
    document: 'del-cli docs && typedoc --options typedoc.config.cjs',
      format: FORMAT_COMMAND,
    lint: 'eslint .',
    test: `del-cli coverage && ${TEST_COMMAND}`,
    typecheck: 'tsc --project tsconfig.typecheck.json',
  },
  devDependencies: getDependencies(developmentDependencies, workspace),
  packageManager: `npm@${semver.minVersion(DEPENDENCY_VERSIONS.npm)}`,
  engines: {
    node: DEPENDENCY_VERSIONS.node,
  },
};
-%>
<%- JSON.stringify(packageJson) %>
