---
to: 'Dockerfile'
if: <%- Boolean(project.config.deployment?.appName) %>
strategy: overwrite
---
<%
let installDependenciesLines = ['COPY --link package-lock.json package.json ./'];

for (let project of workspace.projects) {
  installDependenciesLines.push(`COPY --link ${project.relativePath}/package.json ${project.relativePath}/package.json`);
}

let copyFilesLines = ['COPY package-lock.json package.json /workspace/'];
let currentProject = project;

for (let project of workspace.projects) {
  if (project.config.deployment?.appName && project.name === currentProject.name) {
    copyFilesLines.push(`COPY --from=build /workspace/${project.relativePath}/build /workspace/${project.relativePath}/build`);
    copyFilesLines.push(`COPY --from=build /workspace/${project.relativePath}/package.json /workspace/${project.relativePath}/package.json`);
  } else if (!project.config.deployment?.appName) {
    if (project.packageJson.bin) {
      copyFilesLines.push(`COPY --from=build /workspace/${project.relativePath}/bin /workspace/${project.relativePath}/bin`);
    }

    copyFilesLines.push(`COPY --from=build /workspace/${project.relativePath}/build /workspace/${project.relativePath}/build`);
    copyFilesLines.push(`COPY --from=build /workspace/${project.relativePath}/package.json /workspace/${project.relativePath}/package.json`);
  }
}
-%>
#
# DO NOT EDIT!
# This file was autogenerated by Carson.
# Changes may cause incorrect behavior and will be lost when the file is regenerated.
#
# Run `npx carson update workspace` to regenerate.
#

# Base stage
FROM node:<%- semver.major(semver.minVersion(DEPENDENCY_VERSIONS.node)) %>-slim as base

WORKDIR /workspace

# Set up env variables
ENV NODE_ENV=production
<%
if (project.config.deployment?.appName) {
-%>
ARG VITE_APP_URL
ENV VITE_APP_URL=$VITE_APP_URL
<%
}

if (project.config.deployment?.dbInstance) {
-%>
ARG GEL_INSTANCE
ENV GEL_INSTANCE=$GEL_INSTANCE
ARG GEL_BRANCH
ENV GEL_BRANCH=$GEL_BRANCH
<%
}
-%>

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to install dependencies
RUN apt-get update -qq && apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3

# Install dependencies
<%- installDependenciesLines.join('\n') %>
RUN npm ci --include=dev --ignore-scripts

# Copy the workspace
COPY --link . .

# Build
<%
if (project.config.deployment?.dbInstance) {
-%>
RUN --mount=type=secret,id=GEL_SECRET_KEY GEL_SECRET_KEY="$(cat /run/secrets/GEL_SECRET_KEY)" npm run build
<%
} else {
-%>
RUN npm run build -- --filter=<%- project.name %>
<%
}
-%>

# Final stage for app image
FROM base

# Copy files
<%- copyFilesLines.join('\n') %>

# Install dependencies
RUN npm ci --omit=dev --ignore-scripts

# Start the server
WORKDIR /workspace/<%- project.relativePath %>
EXPOSE <%- APP_PORT %>
ENTRYPOINT ["npm", "start"]
