---
to: 'package.json'
strategy: merge
---
<%
let developmentDependencies = [
  LINTER_CONFIG_PACKAGE_NAME,
  '@types/lodash',
  '@types/node',
  '@vitest/coverage-v8',
  'del-cli',
  'esbuild',
  'eslint',
  'lodash',
  'prettier',
  'prettier-plugin-packagejson',
  'typescript',
  'vitest',
].filter((dependency) => {
  return !Object.keys(project.packageJson.dependencies ?? {}).some((key) => key === dependency); // if the project package.json already contains dependency, we don't need to add it
});
let packageJson = lodash.merge(
  {
    repository: {
      type: 'git',
      directory: project.relativePath,
    },
    type: 'commonjs',
    exports: `./${BUILD_DIRECTORY}/main.js`,
    files: [BUILD_DIRECTORY, SOURCE_DIRECTORY],
    scripts: {
      build: `del-cli ${BUILD_DIRECTORY} tsconfig.tsbuildinfo && ${getBuildToCjsCommand(workspace)} && tsc`,
      clean: `del-cli coverage ${BUILD_DIRECTORY} *.tsbuildinfo`,
      format: FORMAT_COMMAND,
      lint: 'eslint .',
      test: `del-cli coverage && ${TEST_COMMAND}`,
      typecheck: 'tsc --project tsconfig.typecheck.json',
    },
    devDependencies: getDependencies(developmentDependencies, workspace),
    packageManager: `npm@${semver.minVersion(getDependencies(['npm'], workspace)['npm'])}`,
    engines: getDependencies(['node', 'npm'], workspace),
  },
  project.config.overrides?.packageJson ?? {},
);
-%>
<%- JSON.stringify(packageJson) %>
